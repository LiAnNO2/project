#include<iostream>
#include<string>
#include<fstream>
#include <vector>
#include <random>
#include <chrono>
#include <cstdlib>
#include <algorithm>
#include <thread>
using namespace std;

vector<string> card = { "A","2","3","4","5","6","7","8","9","10","J","Q","K" };
vector<int> card_n = { 11,2,3,4,5,6,7,8,9,10,10,10,10 };
vector<int> count_com;
vector<int> count_play;
vector<string> ooxx = { "   ","   ","   " };

int count_num(vector<int> s);
string jugde(string str, string answer);
string decrypt(string s, int a);
void printBoard(const std::vector<std::vector<char>>& board);
bool checkWin(const std::vector<std::vector<char>>& board, char player);
bool checkTie(const std::vector<std::vector<char>>& board);
void playGame();

void printHorizontalLine(int size) {
	cout << "+";
	for (int i = 0; i < size; i++) {
		cout << "---+";
	}
	cout << endl;
}

void printVerticalLine(int size) {
	cout << "|";
	for (int i = 0; i < size; i++) {
		cout << "   |";
	}
	cout << endl;
}

int main() {
	int a;
	int m,n,h,h1;
	int total_computer;
	int total_player;
	char ch;
	string p;
	string b; // 判斷要不要重新選game
	vector<string> computer;
	vector<string> player;
	// 隨機數設定
	unsigned seed = chrono::system_clock::now().time_since_epoch().count();
	mt19937 gen(seed);
	uniform_int_distribution<int> dist(1, 13);

	int nums[4];
	string answer;
	string str;
	uniform_int_distribution<int> number(0, 9);

	int rr = 0;
	string r[3];
	string gg;
	string filename = "encrypt.txt";
	ifstream myfile = ifstream(filename);
	string filename1 = "decrypt.txt";
	ofstream file(filename1);
	while (1) {
		if (b == "no") {
			cout << "------------------------------------\n" << endl;
			cout << "Thank you for your playing" << endl;
			break;
		}
		cout << "1. Black Jack" << endl;
		cout << "2. Cows and Bulls" << endl;
		cout << "3. Caesar cipher" << endl;
		cout << "4. Tic Tac Toe" << endl;
		cout << "5. Exit\n" << endl;
		cout << "I want to choose ";
		cin >> a;
		getchar();
		switch (a) {
		case 1:   //可以優化版面
			system("cls");
			cout << "Welcome to Black Jack\n" << endl;
			m = 0, n = 0;
			total_computer = 0;
			total_player = 0;
			for (int i = 0; i < 2; i++) {
				int c = dist(gen);
				computer.push_back(card[c - 1]);
				count_com.push_back(card_n[c - 1]);
				total_computer = count_num(count_com);
			}
			for (int i = 0; i < 2; i++) {
				int d = dist(gen);
				player.push_back(card[d - 1]);
				count_play.push_back(card_n[d - 1]);
				total_player = count_num(count_play);
			}
			cout << "computer card : " << computer[0] << " " << computer[1] << endl;
			cout << "your card : " << player[0] << " " << player[1] << endl;
			for (;;) {
				if (total_computer > 18) {
					break;
				}
				else {
					int e = dist(gen);
					computer.push_back(card[e - 1]);
					count_com.push_back(card_n[e - 1]);
					total_computer = count_num(count_com);
					cout << "computer card :";
					for (int i = 0; i < computer.size(); i++) {
						cout << " " << computer[i];
					}
					cout << "  your card : " << player[0] << " " << player[1] << endl;
				}
			}
			cout << "\nYour turn" << endl;
			while (1) {
				cout << "Do you want more? ";   // 要牌就打y 不要就打n
				cin >> p;
				if (p == "n") {
					break;
				}
				else if (p == "y") {
					int e = dist(gen);
					player.push_back(card[e - 1]);
					count_play.push_back(card_n[e - 1]);
					total_player = count_num(count_play);
					cout << "computer card :";
					for (int i = 0; i < computer.size(); i++) {
						cout << " " << computer[i];
					}
					cout << "  your card : ";
					for (int i = 0; i < player.size(); i++) {
						cout << " " << player[i];
					}
					cout << endl;
				}
				else {
					cout << "Please try to press \'y\' or \'n\'" << endl;
				}
			}
			cout << "\ntotal result :\ncomputer point : " << total_computer << "\nyour point : " << total_player << endl;
			if (total_computer > 21) m = 1;
			if (total_player > 21) n = 1;
			if (total_computer == 21 && total_player != 21) {
				cout << "computer win" << endl;
			}
			else if (total_computer != 21 && total_player == 21) {
				cout << "you win" << endl;
			}
			else if (total_computer > total_player && m == 0 && n == 0) {
				cout << "computer win" << endl;
			}
			else if (total_computer < total_player && m == 0 && n == 0) {
				cout << "you win" << endl;
			}
			else if (m == 0 && n == 1) cout << "computer win" << endl;
			else if (m == 1 && n == 0) cout << "you win" << endl;
			else cout << "draw" << endl;
			computer.clear();
			player.clear();
			cout << "\nWait for 7 seconds and go back to mainpage";
			std::this_thread::sleep_for(std::chrono::seconds(7));
			system("cls");
			break;
		case 2:
			system("cls");
			cout << "Welcome to Cows and Bulls\n" << endl;
			for (int i = 0; i < 4; i++) {
				int num;
				do {
					num = number(gen);
				} while (find(nums, nums + i, num) != nums + i);
				nums[i] = num;
			}
			answer = to_string(nums[0]) + to_string(nums[1]) + to_string(nums[2]) + to_string(nums[3]);
			for (int l = 0; l < 10; l++) {
				cout << "Try to enter your answer : ";
				cin >> str;
				if (jugde(str, answer) == "4A0B") {
					cout << "\nCongraguation!!!" << endl;
					break;
				}
				else {
					cout << jugde(str, answer) << endl;
				}
				if (l == 9) {
					cout << "\nThe answer is : " << answer << endl;
					cout << "Next time will be better" << endl;
					
				}
			}
			cout << "\nWait for 7 seconds and go back to mainpage";
			std::this_thread::sleep_for(std::chrono::seconds(7));
			system("cls");
			break;
		case 3:
			system("cls");
			cout << "Welcome to Caesar cipher\n" << endl;
			getchar();

			if (!myfile) {
				cerr << "Cannot open file: " << filename << endl;
				return 1;
			}
			while (getline(myfile, gg)) {
				r[rr++] = gg;
			}
			myfile.close();

			cout << "messege_before : " << r[0] << endl;
			gg = decrypt(r[0], stoi(r[1]));
			cout << "messege_after : " << gg << endl;
			if (!file) {
				cerr << "Cannot create file: " << filename1 << endl;
				return 1;
			}
			file << gg;
			file.close();
			cout << "\nWait for 5 seconds and go back to mainpage";
			std::this_thread::sleep_for(std::chrono::seconds(5));
			system("cls");
			break;
		case 4: // 井字遊戲
			system("cls");
			cout << "Welcome to Tic Tac Toe\n" << endl;
			playGame();
			cout << "\nWait for 7 seconds and go back to mainpage";
			std::this_thread::sleep_for(std::chrono::seconds(7));
			system("cls");
			break;
		case 5:
			system("cls");
			cout << "Are you sure to leave the game?"; // 打 y 或 n
			cin >> b;
			if (b == "y") {
				system("cls");
				cout << "Thanks for your playing" << endl;
				return 0;
			}
			system("cls");
			break;
		default:
			system("cls");
			cout << "We don't have this case.\nTry to choose other cases." << endl;
			cout << "Wait for 3 seconds and back to main page" << endl;
			std::this_thread::sleep_for(std::chrono::seconds(3));
			system("cls");
			break;
		}
	}
	return 0;
}

inline int count_num(vector<int> s) {
	int sum = 0;
	int h = 0; // 看有幾個A
	for (int i = 0; i < s.size(); i++) {
		sum += s[i];
		if (s[i] == 11) {
			h += 1;
		}
	}
	for (int j = 0; j < h; j++) {
		if (sum > 21) {
			sum -= 10;
		}
		else {
			break;
		}
	}
	return sum;
}

string jugde(string str, string answer) {
	int A = 0, B = 0;
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			if (str[j] == answer[i]) {
				B++;
				break;
			}
		}
	}
	for (int i = 0; i < 4; i++) {
		if (answer[i] == str[i]) {
			A++;
			B--;
		}
	}
	string u = to_string(A) + "A" + to_string(B) + "B";
	return u;
}

string decrypt(string s, int a) {
	int b = a;
	b %= 26;
	string h;
	for (int i = 0; i < s.size(); i++) {
		if ('a' <= s[i] && s[i] <= 'z') {
			if (s[i] - b < 'a') {
				h += s[i] - b + 'z' - 'a' + 1;
			}
			else {
				h += s[i] - b;
			}
		}
		else if ('A' <= s[i] && s[i] <= 'Z') {
			if (s[i] - b < 'A') {
				h += s[i] - b + 'Z' - 'A' + 1;
			}
			else {
				h += s[i] - b;
			}
		}
		else {
			h += s[i];
		}
	}
	return h;
}

void printBoard(const std::vector<std::vector<char>>& board) {
	for (int i = 0; i < 3; ++i) {
		for (int j = 0; j < 3; ++j) {
			cout << board[i][j] << ' ';
		}
		cout << endl;
	}
}

bool checkWin(const std::vector<std::vector<char>>& board, char player) {
	// 檢查行
	for (int i = 0; i < 3; ++i) {
		if (board[i][0] == player && board[i][1] == player && board[i][2] == player)
			return true;
	}

	// 檢查列
	for (int j = 0; j < 3; ++j) {
		if (board[0][j] == player && board[1][j] == player && board[2][j] == player)
			return true;
	}

	// 檢查對角線
	if (board[0][0] == player && board[1][1] == player && board[2][2] == player)
		return true;

	if (board[0][2] == player && board[1][1] == player && board[2][0] == player)
		return true;

	return false;
}

bool checkTie(const std::vector<std::vector<char>>& board) {
	for (int i = 0; i < 3; ++i) {
		for (int j = 0; j < 3; ++j) {
			if (board[i][j] == ' ')
				return false;
		}
	}
	return true;
}

void playGame() {
	string player1, player2;
	vector<vector<char>> board(3, vector<char>(3, ' '));
	char currentPlayer = 'O';

	cout << "Enter the first player's name : ";
	getline(cin, player1);
	cout << "\nEnter the second player's name : ";
	getline(cin, player2);
	cout << endl;
	cout << "Note : The x-axis is positive to the right, and the y-axis is positive downward\n" << endl;

	while (true) {
		string curr;
		if (currentPlayer == 'O') {
			curr = player1;
		}
		else {
			curr = player2;
		}
		cout << "current player: " << curr << "(" << currentPlayer << ")" << endl;
		printBoard(board);

		int row, col;
		cout << "Please enter coordinates (format：x y):";
		cin >> col >> row;

		row -= 1;
		col -= 1;

		if (row < 0 || row >= 3 || col < 0 || col >= 3) {
			cout << "Invalid input ! Please enter again" << endl;
			continue;
		}

		if (board[row][col] != ' ') {
			cout << "The position is already taken ! Please enter again" << endl;
			continue;
		}

		board[row][col] = currentPlayer;

		if (checkWin(board, currentPlayer)) {
			cout << "\nPlayer " << curr << "(" << currentPlayer << ")" << " win!" << endl;
			break;
		}

		if (checkTie(board)) {
			cout << "\ndraw!" << endl;
			break;
		}

		// 換玩家
		currentPlayer = (currentPlayer == 'O') ? 'X' : 'O';
		cout << endl;
	}
}
