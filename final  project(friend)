#include<iostream>
#include<string>
#include<fstream>
#include <vector>
#include <random>
#include <chrono>
#include <cstdlib>
#include <algorithm>
using namespace std;

vector<string> card = { "A","2","3","4","5","6","7","8","9","10","J","Q","K" };
vector<int> card_n = { 10,2,3,4,5,6,7,8,9,10,10,10,10 };

int count_num(vector<string> v, int c, int sum1);
string jugde(string str, string answer);
string decrypt(string s, int a);

int main() {
	int a;
	int m, n;
	int total_computer;
	int total_player;
	char ch;
	string p;
	string b; // 判斷要不要重新選game
	vector<string> computer;
	vector<string> player;
	// 隨機數設定
	unsigned seed = chrono::system_clock::now().time_since_epoch().count();
	mt19937 gen(seed);
	uniform_int_distribution<int> dist(1, 13);

	int nums[4];
	string answer;
	string str;
	uniform_int_distribution<int> number(0, 9);

	int rr = 0;
	string r[3];
	string gg;
	string filename = "encrypt.txt";
	ifstream myfile = ifstream(filename);
	string filename1 = "decrypt.txt";
	ofstream file(filename1);
	while (1) {
		if (b == "no") {
			cout << "------------------------------------" << endl;
			cout << endl;
			cout << "Thank you for your playing" << endl;
			break;
		}
		cout << "Game 1 : Black Jack" << endl;
		cout << "Game 2 : Cows and Bulls" << endl;
		cout << "Game 3 : Caesar cipher" << endl;
		cout << endl;
		cout << "I want to play game ";
		cin >> a;
		cout << "------------------------------------" << endl;
		switch (a) {
		case 1:
			system("cls");
			cout << "Welcome to Black Jack" << endl;
			cout << endl;
			m = 0, n = 0;
			total_computer = 0;
			total_player = 0;
			for (int i = 0; i < 2; i++) {
				int c = dist(gen);
				computer.push_back(card[c - 1]);
				total_computer = count_num(computer, c - 1, total_computer);
			}
			for (int i = 0; i < 2; i++) {
				int d = dist(gen);
				player.push_back(card[d - 1]);
				total_player = count_num(player, d - 1, total_player);
			}
			cout << "computer card : " << computer[0] << " " << computer[1] << endl;
			cout << "your card : " << player[0] << " " << player[1] << endl;
			for (;;) {
				if (total_computer > 18) {
					break;
				}
				else {
					int e = dist(gen);
					computer.push_back(card[e - 1]);
					total_computer = count_num(computer, e - 1, total_computer);
					cout << "computer card :";
					for (int i = 0; i < computer.size(); i++) {
						cout << " " << computer[i];
					}
					cout << " your card : " << player[0] << " " << player[1] << endl;
				}
			}
			cout << "\nYour turn" << endl;
			while (1) {
				cout << "Do you want more? ";   // 要牌就打y 不要就打n
				cin >> p;
				if (p == "n") {
					break;
				}
				else if (p == "y") {
					int e = dist(gen);
					player.push_back(card[e - 1]);
					total_player = count_num(player, e - 1, total_player);
					cout << "computer card :";
					for (int i = 0; i < computer.size(); i++) {
						cout << " " << computer[i];
					}
					cout << " your card :";
					for (int i = 0; i < player.size(); i++) {
						cout << " " << player[i];
					}
					cout << endl;
				}
				else {
					cout << "Please try to press \'y\' or \'n\'" << endl;
				}
			}
			cout << "total result :\ncomputer point : " << total_computer << "\nyour point : " << total_player << endl;
			if (total_computer > 21) m = 1;
			if (total_player > 21) n = 1;
			if (total_computer == 21 && total_player != 21) {
				cout << "computer win" << endl;
			}
			else if (total_computer != 21 && total_player == 21) {
				cout << "you win" << endl;
			}
			else if (total_computer > total_player && m == 0 && n == 0) {
				cout << "computer win" << endl;
			}
			else if (total_computer < total_player && m == 0 && n == 0) {
				cout << "you win" << endl;
			}
			else if (m == 0 && n == 1) cout << "computer win" << endl;
			else if (m == 1 && n == 0) cout << "you win" << endl;
			else cout << "draw" << endl;
			computer.clear();
			player.clear();
			break;
		case 2:
			system("cls");
			cout << "Welcome to Cows and Bulls" << endl;
			for (int i = 0; i < 4; i++) {
				int num;
				do {
					num = number(gen);
				} while (find(nums, nums + i, num) != nums + i);
				nums[i] = num;
			}
			answer = to_string(nums[0]) + to_string(nums[1]) + to_string(nums[2]) + to_string(nums[3]);
			for (int l = 0; l < 10; l++) {
				cout << "Try to enter your answer : ";
				cin >> str;
				if (jugde(str, answer) == "4A0B") {
					cout << "Congraguation!!!" << endl;
					break;
				}
				else {
					cout << jugde(str, answer) << endl;
				}
				if (l == 9) {
					cout << "Next time will be better" << endl;
				}
			}
			break;
		case 3:
			system("cls");
			cout << "Welcome to Caesar cipher" << endl;
			getchar();

			if (!myfile) {
				cerr << "Cannot open file: " << filename << endl;
				return 1;
			}
			while (getline(myfile, gg)) {
				r[rr++] = gg;
			}
			myfile.close();

			cout << "messege_before : " << r[0] << endl;
			gg = decrypt(r[0], stoi(r[1]));
			cout << "messege_after : " << gg << endl;
			if (!file) {
				cerr << "Cannot create file: " << filename1 << endl;
				return 1;
			}
			file << gg;
			file.close();
			break;
		default:
			system("cls");
			cout << "We don't have this game.\nTry to choose other games." << endl;
			cout << "------------------------------------" << endl;
			break;
		}
		cout << "------------------------------------" << endl;
		cout << "Do you want to play this or other games ?\nPlease enter \"yes\" or \"no\"\n";
		cin >> b;
	}
	return 0;
}

inline int count_num(vector<string> s, int c, int sum1) {
	int h = 0; // 看有沒有A
	int sum = 0;
	for (int i = 0; i < s.size(); i++) {
		if (s[i] == "A") {
			h = 1;
		}
	}
	sum += card_n[c];
	sum += sum1;
	if (sum > 21 && h == 1) {
		return sum - 10;
	}
	else {
		return sum;
	}
}

string jugde(string str, string answer) {
	int A = 0, B = 0;
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			if (str[j] == answer[i]) {
				B++;
				break;
			}
		}
	}
	for (int i = 0; i < 4; i++) {
		if (answer[i] == str[i]) {
			A++;
			B--;
		}
	}
	string u = to_string(A) + "A" + to_string(B) + "B";
	return u;
}

string decrypt(string s, int a) {
	int b = a;
	b %= 26;
	string h;
	for (int i = 0; i < s.size(); i++) {
		if ('a' <= s[i] && s[i] <= 'z') {
			if (s[i] - b < 'a') {
				h += s[i] - b + 'z' - 'a' + 1;
			}
			else {
				h += s[i] - b;
			}
		}
		else if ('A' <= s[i] && s[i] <= 'Z') {
			if (s[i] - b < 'A') {
				h += s[i] - b + 'Z' - 'A' + 1;
			}
			else {
				h += s[i] - b;
			}
		}
		else {
			h += s[i];
		}
	}
	return h;
}
